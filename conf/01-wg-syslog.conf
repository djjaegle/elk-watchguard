input {
  udp {
    port => 5140
    type => syslog
  }
}

filter {
  if [type] == "syslog" {
    # Watchguard firewall traffic logs have two distinct record types 140 & 142
    # The following grok patterns cover all the possible variations
    grok {
      match => {"message" => [
        "\<%{INT:rec_type}\>%{SYSLOGTIMESTAMP:syslog_tstamp} %{IPORHOST:syslog_host} %{DATA:fw_msg_type}: msg_id=\"%{DATA:msg_id}\" %{NOTSPACE:fw_action} %{NOTSPACE:fw_source} %{NOTSPACE:fw_target} %{INT:ip_pkt_len} (?<protocol>gre|icmp|tcp|udp) %{INT:ip_head_len} %{INT:ttl} %{IP:source_ip} %{IP:target_ip} %{INT:source_port} %{INT:target_port} %{GREEDYDATA:msg_tail}",
        "\<%{INT:rec_type}\>%{SYSLOGTIMESTAMP:syslog_tstamp} %{IPORHOST:syslog_host} %{DATA:fw_msg_type}: msg_id=\"%{DATA:msg_id}\" %{NOTSPACE:fw_action} %{NOTSPACE:fw_source} %{NOTSPACE:fw_target} %{INT:ip_pkt_len} (?<protocol>gre|icmp|tcp|udp) %{INT:ip_head_len} %{INT:ttl} %{IP:source_ip} %{IP:target_ip} %{GREEDYDATA:msg_tail}",
        "\<%{INT:rec_type}\>%{SYSLOGTIMESTAMP:syslog_tstamp} %{IPORHOST:syslog_host} %{DATA:fw_msg_type}: msg_id=\"%{DATA:msg_id}\" %{NOTSPACE:fw_action} %{NOTSPACE:fw_source} %{NOTSPACE:fw_target} (?<protocol>gre|icmp|tcp|udp) %{IP:source_ip} %{IP:target_ip} %{INT:source_port} %{INT:target_port} %{GREEDYDATA:msg_tail}",
        "\<%{INT:rec_type}\>%{SYSLOGTIMESTAMP:syslog_tstamp} %{IPORHOST:syslog_host} %{DATA:fw_msg_type}: msg_id=\"%{DATA:msg_id}\" %{NOTSPACE:fw_action} %{NOTSPACE:fw_source} %{NOTSPACE:fw_target} (?<protocol>gre|icmp|tcp|udp) %{IP:source_ip} %{IP:target_ip} %{GREEDYDATA:msg_tail}"
        ]}
      # Needed to prevent duplicate values in repeated pattern fields
      overwrite => [ "rec_code", "syslog_tstamp", "syslog_host", "fw_msg_type", "msg_id", "fw_action", "fw_source", "fw_target", "protocol", "source_ip", "target_ip" ]
    }
    # Take the remaining log entry and split out key/value pairs
    kv {
      allow_duplicate_values => false
      source => "msg_tail"
    }
    # Tag the entry if the source_ip is in the private CIDR ranges (Class A,B,C)
    cidr {
      address => [ "%{source_ip}" ]
      network => [ "10.0.0.0/8" , "172.16.0.0/12", "192.168.0.0/16" ]
      add_tag => [ "private_src_ip" ]
    }
    # If the source_ip is private, get the Geo info for the target_ip
    if "private_src_ip" in [tags] {
      geoip {
        ecs_compatibility => "disabled"
        source => "target_ip"
        target => "geo_target"
      }
    }
    # If the source_ip is public, get the Geo info for the source_ip
    if "private_src_ip" not in [tags] {
      geoip {
        ecs_compatibility => "disabled"
        source => "source_ip"
        target => "geo_source"
      }
    }
  }
}

output {
  elasticsearch { hosts => ["localhost:9200"] }
  stdout { codec => rubydebug }
}